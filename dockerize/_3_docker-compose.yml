# docker-compose --version
# docker-compose up
# docker-compose up -d
# docker-compose -f _3_Docker_compose.yml up -d
# docker-compose -f _3_Docker_compose.yml up
# docker-compose down
# docker-compose restart
# docker-compose ps

# restart: on-failure => Conteynar çökmesi halinde  Docker compose otomatik çalıştır.
# restart: no         => Default olan. Docker compose otomatik başlasın.
# restart: always     => Conteynar her zaman Docker compose otomatik başlasın.
# restart:unless-stopped => Conteynar durduğu zaman Docker compose yeniden başlasın

version: '3.8'

# Services
services:
   # Tomcat
  apache_tomcat_web:
    container_name: my_tomcat2
    image: my_tomcat2
    restart: on-failure 
    #build: ./
    #build: ./deneme
    build:
      context: .
      dockerfile: _2_Dockerfile
    ports:
      - "1111:8080"
    volumes:
      - tomcat-logs:/usr/local/tomcat/logs
      - tomcat-webapps:/usr/local/tomcat/webapps
      - tomcat-conf:/usr/local/tomcat/conf
      - ./tomcat/conf/tomcat-users.xml:/usr/local/tomcat/conf/tomcat-users.xml
      - ./tomcat/conf/server.xml:/usr/local/tomcat/conf/server.xml
      - ./tomcat/conf/web.xml:/usr/local/tomcat/conf/web.xml
      - ./tomcat/conf/context.xml:/usr/local/tomcat/conf/context.xml
      - ./tomcat/webapps/manager/META-INF/context.xml:/usr/local/tomcat/webapps/manager/META-INF/context.xml
      - ./tomcat/bin/catalina.sh:/usr/local/tomcat/bin/catalina.sh
    networks:
      - tomcatnetwork

  # Jenkins
  jenkins:
    image: jenkins/jenkins:latest
    container_name: jenkins_master
    ports:
      - "2222:8080"
    volumes:
      - jenkins_home:/var/jenkins_home
    environment:
      JAVA_OPTS: "-Djenkins.install.runSetupWizard=false" # ilk kurulum sihirbazı devre dışı burakmak
    networks:
      - tomcatnetwork        
  
  # Grafana
  grafana:
    image: grafana/grafana:latest
    ports:
      - 3333:3000
    networks:
      - tomcatnetwork   

# Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - 4444:9090
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - tomcatnetwork   

  # Jmx
  jmx-exporter:
    image: sscaling/jmx-prometheus-exporter
    ports:
      - "5555:9072"
    environment:
      SERVICE_PORT: 9072
    volumes:
      - ./jmx/config.yml:/opt/jmx_exporter/config.yml
    networks:
      - tomcatnetwork

  
# Volume
volumes:
  tomcat-logs:
    driver: local
  tomcat-webapps:
    driver: local
  tomcat-conf:
    driver: local
  jenkins_home:
    driver: local

# Network
networks:
  tomcatnetwork:
    name: tomcatnetwork
    driver: bridge
 
#####################################################################
#####################################################################
#####################################################################
# ./deployment1.sh

# Jenkins => docker exec -it jenkins_master cat /var/jenkins_home/secrets/initialAdminPassword


# docker ps
# winpty docker container  exec -it  my_tomcat2 bash
# cd usr/local/tomcat/logs
# cd usr/local/tomcat/webapps
# rm -rf examples
# ls -al
# 
# docker-compose down
# docker volume --help
# docker volume ls
# docker volume inspect <VOLUME_NAME>
# docker volume rm <VOLUME_NAME>


# Yeni bir container oluştur ve o container terminaline bağlan
# Bu container içinde önceden verdiğim volume ekle
# winpty docker run -it --rm --name volume_container \
# -v tomcat_tomcat-conf://usr/local/tomcat/conf \
# -v tomcat_tomcat-logs://usr/local/tomcat/logs \
# -v tomcat_tomcat-webapps://usr/local/tomcat/webapps \
# my_tomcat2 bash





